shiny::runApp('C:/Users/bop/DevelopDataProduct_project1/ShinyApp')
shiny::runApp('C:/Users/bop/DevelopDataProduct_project1/ShinyApp')
shiny::runApp('C:/Users/bop/DevelopDataProduct_project1/ShinyApp')
shiny::runApp('C:/Users/bop/DevelopDataProduct_project1/ShinyApp')
shiny::runApp('C:/Users/bop/DevelopDataProduct_project1/ShinyApp')
shiny::runApp('C:/Users/bop/DevelopDataProduct_project1/ShinyApp')
q()
shiny::runApp('C:/Users/bop/DevelopDataProduct_project1/ShinyApp')
rm(list=ls())
library(MASS)
data(shuttle)
names(shuttle)
>glm
?glm
fit1<-glm(use ~ wind, data=shuttle,family=binomial)
summary(fit1)
levels(shuttle$use)
shuttle$use==1
clear
rm(list=ls())
library(MASS)
data(shuttle)
names(shuttle)
levels(shuttle$use)
fit1<-glm(use ~ wind, data=shuttle,family=binomial)
summary(fit1)
View(shuttle)
View(shuttle)
getwd
getwd()
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
libray(caret)
library(caret)
rf_fit<-train(y~.,data=vowel.tain,method="rf")
?train
rf_fit<-train(vowel.tain[,-1],vowel.tain[,1],method="rf",trControl = trainControl(method = "cv"))
rf_fit<-train(vowel.train[,-1],vowel.train[,1],method="rf",trControl = trainControl(method = "cv"))
library(randomForest)
rf_fit<-train(vowel.train[,-1],vowel.train[,1],method="rf",trControl = trainControl(method = "cv"))
gbm_fit<-train(vowel.train[,-1],vowel.train[,1],method="gbm",
trControl = trainControl(method = "cv"))
train_model_RF = train(y ~ ., method="rf", data = vowel.train);
train_model_GBM = train(y ~ ., method="gbm", data = vowel.train);
predict_RF = predict(train_model_RF, vowel.test);
predict_GBM = predict(train_model_GBM, vowel.test);
accuracy_rf<- sum(predict_RF==vowel.test[,1])/nrow(vowel.test)
accuracy_gbm<- sum(predict_GBM==vowel.test[,1])/nrow(vowel.test)
acu<- sum(predict_RF==vowel.test and predict_GBM==vowel.test))/nrow(vowel.test)
acu<- sum(predict_RF==vowel.test & predict_GBM==vowel.test))/nrow(vowel.test)
acu<- sum(predict_RF==vowel.test && predict_GBM==vowel.test))/nrow(vowel.test)
acu<- sum( predict_RF==vowel.test && predict_GBM==vowel.test)/nrow(vowel.test)
acu<- sum( predict_RF==vowel.test & predict_GBM==vowel.test)/nrow(vowel.test)
acu<- sum( (predict_RF==vowel.test) & (predict_GBM==vowel.test))/nrow(vowel.test)
a <- predict_RF==vowel.test
a <- predict_RF==vowel.test$y
b <- predict_GBM==vowel.test$y
c<-a&b
acu<- sum(c)/nrow(vowel.test)
nrow(vowel.test)
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(caret)
library(randomForest)
# rf_fit<-train(vowel.train[,-1],vowel.train[,1],method="rf",
#               trControl = trainControl(method = "cv"))
# gbm_fit<-train(vowel.train[,-1],vowel.train[,1],method="gbm",
#                trControl = trainControl(method = "cv"))
train_model_RF = train(y ~ ., method="rf", data = vowel.train);
train_model_GBM = train(y ~ ., method="gbm", data = vowel.train);
predict_RF = predict(train_model_RF, vowel.test);
predict_GBM = predict(train_model_GBM, vowel.test);
accuracy_rf<- sum(predict_RF==vowel.test[,1])/nrow(vowel.test)
accuracy_gbm<- sum(predict_GBM==vowel.test[,1])/nrow(vowel.test)
a <- predict_RF==vowel.test$y
b <- predict_GBM==vowel.test$y
c<-a&b
acu<- sum(c)/nrow(vowel.test)
c<-a&b;d<-a|b
acu<- sum(c)/sum(d)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(caret)
library(randomForest)
train_model_RF<-train(vowel.train[,-1],vowel.train[,1],method="rf",
trControl = trainControl(method = "cv"))
train_model_GBM<-train(vowel.train[,-1],vowel.train[,1],method="gbm",
trControl = trainControl(method = "cv"))
predict_RF = predict(train_model_RF, vowel.test);
predict_GBM = predict(train_model_GBM, vowel.test);
predict_RF = predict(train_model_RF, vowel.test[,-1]);
predict_GBM = predict(train_model_GBM, vowel.test[,-1]);
accuracy_rf<- sum(predict_RF==vowel.test[,1])/nrow(vowel.test)
accuracy_gbm<- sum(predict_GBM==vowel.test[,1])/nrow(vowel.test)
a <- predict_RF==vowel.test$y
b <- predict_GBM==vowel.test$y
c<-a&b;d<-a|b
acu<- sum(c)/sum(d)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
train_model_RF = train(diagnosis ~ ., method="rf", data = training);
train_model_GBM = train(diagnosis ~ ., method="gbm", data = training);
train_model_LDA = train(diagnosis ~ ., method="lda", data = training);
predict_RF = predict(train_model_RF, vowel.test);
predict_RF = predict(train_model_RF, training);
predict_GBM = predict(train_model_GBM, training);
predict_LDA = predict(train_model_LDA, training);
predf <- data.frame(predict_RF,predict_GBM,predict_LDA,diag=training$diagnosis)
combModFit <- train(diag ~ ., method="gam",data=predf)
comPred<-predict(combModFit,predf)
combModFit <- train(diag ~ ., method="rf",data=predf)
comPred<-predict(combModFit,predf)
testing
testing
predict_RF = predict(train_model_RF, testing);
predict_GBM = predict(train_model_GBM, testing);
predict_LDA = predict(train_model_LDA, testing);
predf <- data.frame(predict_RF,predict_GBM,predict_LDA,diag=testing$diagnosis)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
train_model_RF = train(diagnosis ~ ., method="rf", data = training);
train_model_GBM = train(diagnosis ~ ., method="gbm", data = training);
train_model_LDA = train(diagnosis ~ ., method="lda", data = training);
predict_RF = predict(train_model_RF, testing);
predict_GBM = predict(train_model_GBM, testing);
predict_LDA = predict(train_model_LDA, testing);
predf <- data.frame(predict_RF,predict_GBM,predict_LDA,diag=testing$diagnosis)
combModFit <- train(diag ~ ., method="rf",data=predf)
com_acu<-sum(comPred==testing$diagnosis)/nrow(testing)
com_LDA<-sum(predict_LDA==testing$diagnosis)/nrow(testing)
comPred
View(testing)
comPred<-predict(combModFit,predf)
com_acu<-sum(comPred==testing$diagnosis)/nrow(testing)
com_LDA<-sum(predict_LDA==testing$diagnosis)/nrow(testing)
com_GBM<-sum(predict_GBM==testing$diagnosis)/nrow(testing)
com_RF<-sum(predict_RF==testing$diagnosis)/nrow(testing)
rm(list=ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
train_model_LAS = train(CompressiveStrength ~ ., method="lasso", data = training);
summary(train_model_LAS)
?plot.enet
plot.enet(train_model_LAS)
plot(train_model_LAS)
names(train_model_LAS)
train_model_LAS$finalModel
dim(coef(train_model_LAS))
coef(train_model_LAS)
names(train_model_LAS)
train_model_LAS$finalModel
plot.enet(train_model_LAS$finalModel, xvar="penalty", use.color=T)
?plot.enet
plot.enet(train_model_LAS$finalModel, xvar="penalty", use.color=T)
plot.enet(train_model_LAS$finalModel, xvar="step", use.color=T)
plot.enet(train_model_LAS$finalModel, xvar="penalty", use.color=T)
plot.enet(train_model_LAS$finalModel)
dim(train_model_LAS$finalModel)
size(train_model_LAS$finalModel)
names(train_model_LAS$finalModel)
train_model_LAS$finalModel$Cp
train_model_LAS$finalModel$penalty
plot.enet(train_model_LAS$finalModel, xvar="penalty", use.color=T)
dat = read.csv("gaData.csv")
training = dat[year(dat$date)  2011,]
tstrain = ts(training$visitsTumblr)
dat = read.csv("gaData.csv")
training = dat[year(dat$date)  2011,]
training = dat[year(dat$date) == 2011,]
training = dat[year(dat$date) = 2011,]
training = dat[year(dat$date) ==2011,]
training = dat[year(as.Date(dat$date)) ==2011,]
?year
as.Date(dat$date)
training = dat[as.numeric(format(as.Date(dat$date), "%Y")) ==2011,]
View(training)
tstrain = ts(training$visitsTumblr)
?ts
View(training)
library(forcast)
install.packages("forecast")
library(forecast)
library(forecast)
library(lubridate)
library(forecast)
install.packages("lubridate")
library(lubridate)
library(lubridate)
library(forecast)
dat = read.csv("gaData.csv")
training = dat[year(dat$date)==2011,]
tstrain = ts(training$visitsTumblr)
testing = testing = dat[year(dat$date)>2011,]
modBats <- bats(tstrain)
pred <- forecast(modBats, h=length(testing$visitsTumblr),level=c(80,95))
accuracy <- 1-sum(testing$visitsTumblr>pred$upper[,2])/length(testing$visitsTumblr)
?bats
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library("e1071")
set .seed (1)
x= matrix (rnorm (20*2) , ncol =2)
y=c(rep ( -1 ,10) , rep (1 ,10) )
x[y==1 ,]= x[y==1 ,] + 1
plot(x, col =(3-y))
dat =data.frame (x=x, y=as.factor (y))
View(dat)
View(dat)
svmfit =svm(y~., data=dat , kernel ="linear ", cost =10, scale = FALSE )
svmfit =svm(y~., data=dat , kernel ="linear", cost =10, scale = FALSE )
plot(svmfit , dat )
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library("e1071")
View(training)
training$CompressiveStrength<-as.factor(training$CompressiveStrength)
svmfit =svm(CompressiveStrength~., data=training)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library("e1071")
# training$CompressiveStrength<-as.factor(training$CompressiveStrength)
svmfit =svm(CompressiveStrength~., data=training)
svmPred<-predict(svmfit,testing)
sqrt(sum((svmPred-testing$CompressiveStrength)^2)/nrow(svmPred))
svmPred-testing$CompressiveStrength
sum((svmPred-testing$CompressiveStrength)^2)
sqrt(sum((svmPred-testing$CompressiveStrength)^2)/256)
rm(list=ls())
library(MASS)
data(shuttle)
names(shuttle)
levels(shuttle$use)
shuttle$use = factor(shuttle$use,levels=("noauto","auto"))
shuttle$use = factor(shuttle$use,levels=("noauto","auto"),
levels(shuttle$use)
levels(shuttle$use) = c("noauto","auto")
levels(shuttle$use)
fit1<-glm(use ~ wind, data=shuttle,family=binomial)
summary(fit1)
H_p<-predict(fit1,"head")
H_p<-predict(fit1,c("head"))
H_p<-predict(fit1,0)
H_p<-predict(fit1,as.factor(c("head","tail")))
rm(list=ls())
library(MASS)
data(shuttle)
names(shuttle)
levels(shuttle$use)
levels(shuttle$use) = c("noauto","auto")
levels(shuttle$use)
fit1<-glm(use ~ wind, data=shuttle,family=binomial)
summary(fit1)
H_p<-predict(fit1,as.factor(c("head","tail")))
exp(coef(fit1))
b<-a[1]/a[2]
a<-exp(coef(fit1))
b<-a[1]/a[2]
b
a
fit1<-glm(use ~ wind+, data=shuttle,family=binomial)
fit2<-glm(use ~ wind +magn, data=shuttle,family=binomial)
b<-exp(coef(fit1))
b
c
fit2<-glm(use ~ wind +magn, data=shuttle,family=binomial)
b<-exp(coef(fit2))
b
fit2<-glm(use ~ wind +magn, data=shuttle,family=binomial)
b<-exp(coef(fit2))
b
fit1<-glm(use ~ wind, data=shuttle,family=binomial)
a<-exp(coef(fit1))
a
rm(list=ls())
library(MASS)
data(shuttle)
names(shuttle)
levels(shuttle$use)
levels(shuttle$use) = c("noauto","auto")
levels(shuttle$use)
levels(shuttle$wind) = c("tail","head")
levels(shuttle$wind)
fit1<-glm(use ~ wind, data=shuttle,family=binomial)
a<-exp(coef(fit1))
a
fit2<-glm(use ~ wind +magn, data=shuttle,family=binomial)
b<-exp(coef(fit2))
b
fit3<-glm(use ~ wind, data=shuttle,family=binomial)
a1<-exp(coef(fit1))
a1
fit3<-glm(use ~ wind, data=shuttle,family=binomial)
a1<-exp(coef(fit3))
a1
fit4<-glm(I(1-use) ~ wind, data=shuttle,family=binomial)
fit4<-glm(1-use ~ wind, data=shuttle,family=binomial)
levels(shuttle$use) = c("aut0","noauto")
fit4<-glm(use ~ wind, data=shuttle,family=binomial)
a2<-exp(coef(fit4))
a2
levels(shuttle$use) = c("auto","noauto")
fit4<-glm(use ~ wind, data=shuttle,family=binomial)
a2<-exp(coef(fit4))
a2
rm(list=ls())
library(MASS)
data(shuttle)
names(shuttle)
levels(shuttle$use)
levels(shuttle$use) = c("noauto","auto")
levels(shuttle$use)
levels(shuttle$wind) = c("tail","head")
levels(shuttle$wind)
fit3<-glm(use ~ wind, data=shuttle,family=binomial)
a1<-exp(coef(fit3))
a1
levels(shuttle$use) = c("auto","noauto")
fit4<-glm(use ~ wind, data=shuttle,family=binomial)
a2<-exp(coef(fit4))
a2
rm(list=ls())
library(MASS)
data(shuttle)
names(shuttle)
levels(shuttle$use)
levels(shuttle$use) = c("noauto","auto")
levels(shuttle$use)
levels(shuttle$wind) = c("tail","head")
levels(shuttle$wind)
levels(shuttle$use) = c("noauto","auto")
fit3<-glm(use ~ wind, data=shuttle,family=binomial)
a1<-exp(coef(fit3))
a1
levels(shuttle$use) = c("auto","noauto")
fit4<-glm(use ~ wind, data=shuttle,family=binomial)
a2<-exp(coef(fit4))
a2
data(InsectSprays)
names(InsectSprays)
View(InsectSprays)
fit4<-glm(count ~ spray, data=InsectSprays,family=poisson)
coef(fit4)
exp(coef(fit4))
levels(InsectSprays$spray)
levels(InsectSprays$spray) = c("B","A","c","D","E","F")
fit4<-glm(count ~ spray, data=InsectSprays,family=poisson)
coef(fit4)
0.05588/2.674
1/exp(0.05588)
y=c(1:10)
x=y-1+rnorm(10)/10
z=c(1:10)
z=z*2
summary(lm(y~x+offset(z)))
z=z*4
summary(lm(y~x+offset(z)))
t<-1:10
x<-c(1,0,1,1,0,0,1,1,0,0)
count<-c(9,9,8,7,9,10,11,8,7,9)
glm(count ~ x + offset(t), family = poisson)
t2<-log(10)+t
glm(count ~ x + offset(t2), family = poisson)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y,x)
plot(x,y)
knots <- 0;
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yfit<-lm(y ~ xMat)
plot(x,yfit$fitted)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
knots <- 0;
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yfit<-lm(y ~ xMat)
lines(x,yfit$fitted,col="red")
summary(yfit)
install.packages("tm")
txt <- system.file("texts", "txt", package = "tm")
txt <- system.file("texts", "txt", package = "tm")
(ovid <- VCorpus(DirSource(txt, encoding = "UTF-8"),
+ readerControl = list(language = "lat")))
ovid <- VCorpus(DirSource(txt, encoding = "UTF-8"),
+ readerControl = list(language = "lat"))
readerControl = list(language = "lat"))
ovid <- VCorpus(DirSource(txt, encoding = "UTF-8"),
readerControl = list(language = "lat"))
rm(list=ls())
library(tm)
txt <- system.file("texts", "txt", package = "tm")
ovid <- VCorpus(DirSource(txt, encoding = "UTF-8"),
readerControl = list(language = "lat"))
docs <- c("This is a text.", "This another one.")
VCorpus(VectorSource(docs))
rm(list=ls())
library(tm)
txt <- system.file("texts", "txt", package = "tm")
docs <- c("This is a text.", "This another one.")
VCorpus(VectorSource(docs))
reut21578 <- system.file("texts", "crude", package = "tm")
reut21578 <- system.file("texts", "crude", package = "tm")
reuters <- VCorpus(DirSource(reut21578),
readerControl = list(reader = readReut21578XMLasPlain))
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
getwd()
setwd("C:/Projects/ShinyApps/DataAnalysis")
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
