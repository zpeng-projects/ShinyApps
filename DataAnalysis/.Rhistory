acu<- sum(c)/sum(d)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
train_model_RF = train(diagnosis ~ ., method="rf", data = training);
train_model_GBM = train(diagnosis ~ ., method="gbm", data = training);
train_model_LDA = train(diagnosis ~ ., method="lda", data = training);
predict_RF = predict(train_model_RF, vowel.test);
predict_RF = predict(train_model_RF, training);
predict_GBM = predict(train_model_GBM, training);
predict_LDA = predict(train_model_LDA, training);
predf <- data.frame(predict_RF,predict_GBM,predict_LDA,diag=training$diagnosis)
combModFit <- train(diag ~ ., method="gam",data=predf)
comPred<-predict(combModFit,predf)
combModFit <- train(diag ~ ., method="rf",data=predf)
comPred<-predict(combModFit,predf)
testing
testing
predict_RF = predict(train_model_RF, testing);
predict_GBM = predict(train_model_GBM, testing);
predict_LDA = predict(train_model_LDA, testing);
predf <- data.frame(predict_RF,predict_GBM,predict_LDA,diag=testing$diagnosis)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
train_model_RF = train(diagnosis ~ ., method="rf", data = training);
train_model_GBM = train(diagnosis ~ ., method="gbm", data = training);
train_model_LDA = train(diagnosis ~ ., method="lda", data = training);
predict_RF = predict(train_model_RF, testing);
predict_GBM = predict(train_model_GBM, testing);
predict_LDA = predict(train_model_LDA, testing);
predf <- data.frame(predict_RF,predict_GBM,predict_LDA,diag=testing$diagnosis)
combModFit <- train(diag ~ ., method="rf",data=predf)
com_acu<-sum(comPred==testing$diagnosis)/nrow(testing)
com_LDA<-sum(predict_LDA==testing$diagnosis)/nrow(testing)
comPred
View(testing)
comPred<-predict(combModFit,predf)
com_acu<-sum(comPred==testing$diagnosis)/nrow(testing)
com_LDA<-sum(predict_LDA==testing$diagnosis)/nrow(testing)
com_GBM<-sum(predict_GBM==testing$diagnosis)/nrow(testing)
com_RF<-sum(predict_RF==testing$diagnosis)/nrow(testing)
rm(list=ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
train_model_LAS = train(CompressiveStrength ~ ., method="lasso", data = training);
summary(train_model_LAS)
?plot.enet
plot.enet(train_model_LAS)
plot(train_model_LAS)
names(train_model_LAS)
train_model_LAS$finalModel
dim(coef(train_model_LAS))
coef(train_model_LAS)
names(train_model_LAS)
train_model_LAS$finalModel
plot.enet(train_model_LAS$finalModel, xvar="penalty", use.color=T)
?plot.enet
plot.enet(train_model_LAS$finalModel, xvar="penalty", use.color=T)
plot.enet(train_model_LAS$finalModel, xvar="step", use.color=T)
plot.enet(train_model_LAS$finalModel, xvar="penalty", use.color=T)
plot.enet(train_model_LAS$finalModel)
dim(train_model_LAS$finalModel)
size(train_model_LAS$finalModel)
names(train_model_LAS$finalModel)
train_model_LAS$finalModel$Cp
train_model_LAS$finalModel$penalty
plot.enet(train_model_LAS$finalModel, xvar="penalty", use.color=T)
dat = read.csv("gaData.csv")
training = dat[year(dat$date)  2011,]
tstrain = ts(training$visitsTumblr)
dat = read.csv("gaData.csv")
training = dat[year(dat$date)  2011,]
training = dat[year(dat$date) == 2011,]
training = dat[year(dat$date) = 2011,]
training = dat[year(dat$date) ==2011,]
training = dat[year(as.Date(dat$date)) ==2011,]
?year
as.Date(dat$date)
training = dat[as.numeric(format(as.Date(dat$date), "%Y")) ==2011,]
View(training)
tstrain = ts(training$visitsTumblr)
?ts
View(training)
library(forcast)
install.packages("forecast")
library(forecast)
library(forecast)
library(lubridate)
library(forecast)
install.packages("lubridate")
library(lubridate)
library(lubridate)
library(forecast)
dat = read.csv("gaData.csv")
training = dat[year(dat$date)==2011,]
tstrain = ts(training$visitsTumblr)
testing = testing = dat[year(dat$date)>2011,]
modBats <- bats(tstrain)
pred <- forecast(modBats, h=length(testing$visitsTumblr),level=c(80,95))
accuracy <- 1-sum(testing$visitsTumblr>pred$upper[,2])/length(testing$visitsTumblr)
?bats
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library("e1071")
set .seed (1)
x= matrix (rnorm (20*2) , ncol =2)
y=c(rep ( -1 ,10) , rep (1 ,10) )
x[y==1 ,]= x[y==1 ,] + 1
plot(x, col =(3-y))
dat =data.frame (x=x, y=as.factor (y))
View(dat)
View(dat)
svmfit =svm(y~., data=dat , kernel ="linear ", cost =10, scale = FALSE )
svmfit =svm(y~., data=dat , kernel ="linear", cost =10, scale = FALSE )
plot(svmfit , dat )
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library("e1071")
View(training)
training$CompressiveStrength<-as.factor(training$CompressiveStrength)
svmfit =svm(CompressiveStrength~., data=training)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library("e1071")
# training$CompressiveStrength<-as.factor(training$CompressiveStrength)
svmfit =svm(CompressiveStrength~., data=training)
svmPred<-predict(svmfit,testing)
sqrt(sum((svmPred-testing$CompressiveStrength)^2)/nrow(svmPred))
svmPred-testing$CompressiveStrength
sum((svmPred-testing$CompressiveStrength)^2)
sqrt(sum((svmPred-testing$CompressiveStrength)^2)/256)
rm(list=ls())
library(MASS)
data(shuttle)
names(shuttle)
levels(shuttle$use)
shuttle$use = factor(shuttle$use,levels=("noauto","auto"))
shuttle$use = factor(shuttle$use,levels=("noauto","auto"),
levels(shuttle$use)
levels(shuttle$use) = c("noauto","auto")
levels(shuttle$use)
fit1<-glm(use ~ wind, data=shuttle,family=binomial)
summary(fit1)
H_p<-predict(fit1,"head")
H_p<-predict(fit1,c("head"))
H_p<-predict(fit1,0)
H_p<-predict(fit1,as.factor(c("head","tail")))
rm(list=ls())
library(MASS)
data(shuttle)
names(shuttle)
levels(shuttle$use)
levels(shuttle$use) = c("noauto","auto")
levels(shuttle$use)
fit1<-glm(use ~ wind, data=shuttle,family=binomial)
summary(fit1)
H_p<-predict(fit1,as.factor(c("head","tail")))
exp(coef(fit1))
b<-a[1]/a[2]
a<-exp(coef(fit1))
b<-a[1]/a[2]
b
a
fit1<-glm(use ~ wind+, data=shuttle,family=binomial)
fit2<-glm(use ~ wind +magn, data=shuttle,family=binomial)
b<-exp(coef(fit1))
b
c
fit2<-glm(use ~ wind +magn, data=shuttle,family=binomial)
b<-exp(coef(fit2))
b
fit2<-glm(use ~ wind +magn, data=shuttle,family=binomial)
b<-exp(coef(fit2))
b
fit1<-glm(use ~ wind, data=shuttle,family=binomial)
a<-exp(coef(fit1))
a
rm(list=ls())
library(MASS)
data(shuttle)
names(shuttle)
levels(shuttle$use)
levels(shuttle$use) = c("noauto","auto")
levels(shuttle$use)
levels(shuttle$wind) = c("tail","head")
levels(shuttle$wind)
fit1<-glm(use ~ wind, data=shuttle,family=binomial)
a<-exp(coef(fit1))
a
fit2<-glm(use ~ wind +magn, data=shuttle,family=binomial)
b<-exp(coef(fit2))
b
fit3<-glm(use ~ wind, data=shuttle,family=binomial)
a1<-exp(coef(fit1))
a1
fit3<-glm(use ~ wind, data=shuttle,family=binomial)
a1<-exp(coef(fit3))
a1
fit4<-glm(I(1-use) ~ wind, data=shuttle,family=binomial)
fit4<-glm(1-use ~ wind, data=shuttle,family=binomial)
levels(shuttle$use) = c("aut0","noauto")
fit4<-glm(use ~ wind, data=shuttle,family=binomial)
a2<-exp(coef(fit4))
a2
levels(shuttle$use) = c("auto","noauto")
fit4<-glm(use ~ wind, data=shuttle,family=binomial)
a2<-exp(coef(fit4))
a2
rm(list=ls())
library(MASS)
data(shuttle)
names(shuttle)
levels(shuttle$use)
levels(shuttle$use) = c("noauto","auto")
levels(shuttle$use)
levels(shuttle$wind) = c("tail","head")
levels(shuttle$wind)
fit3<-glm(use ~ wind, data=shuttle,family=binomial)
a1<-exp(coef(fit3))
a1
levels(shuttle$use) = c("auto","noauto")
fit4<-glm(use ~ wind, data=shuttle,family=binomial)
a2<-exp(coef(fit4))
a2
rm(list=ls())
library(MASS)
data(shuttle)
names(shuttle)
levels(shuttle$use)
levels(shuttle$use) = c("noauto","auto")
levels(shuttle$use)
levels(shuttle$wind) = c("tail","head")
levels(shuttle$wind)
levels(shuttle$use) = c("noauto","auto")
fit3<-glm(use ~ wind, data=shuttle,family=binomial)
a1<-exp(coef(fit3))
a1
levels(shuttle$use) = c("auto","noauto")
fit4<-glm(use ~ wind, data=shuttle,family=binomial)
a2<-exp(coef(fit4))
a2
data(InsectSprays)
names(InsectSprays)
View(InsectSprays)
fit4<-glm(count ~ spray, data=InsectSprays,family=poisson)
coef(fit4)
exp(coef(fit4))
levels(InsectSprays$spray)
levels(InsectSprays$spray) = c("B","A","c","D","E","F")
fit4<-glm(count ~ spray, data=InsectSprays,family=poisson)
coef(fit4)
0.05588/2.674
1/exp(0.05588)
y=c(1:10)
x=y-1+rnorm(10)/10
z=c(1:10)
z=z*2
summary(lm(y~x+offset(z)))
z=z*4
summary(lm(y~x+offset(z)))
t<-1:10
x<-c(1,0,1,1,0,0,1,1,0,0)
count<-c(9,9,8,7,9,10,11,8,7,9)
glm(count ~ x + offset(t), family = poisson)
t2<-log(10)+t
glm(count ~ x + offset(t2), family = poisson)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y,x)
plot(x,y)
knots <- 0;
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yfit<-lm(y ~ xMat)
plot(x,yfit$fitted)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
knots <- 0;
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yfit<-lm(y ~ xMat)
lines(x,yfit$fitted,col="red")
summary(yfit)
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
rm(list=ls())
library(httr)
up_twitter_oauth("HJB9l39OhH7XKqr6deYHROft6",
" l4ZyUExemzqPnEeD5qtw5aHuuN8oSMCOe7pNSNaE7lTVHzuGYI")
library(twitteR)
install.packages("twitteR")
library(httr)
library(twitteR)
up_twitter_oauth("HJB9l39OhH7XKqr6deYHROft6",
" l4ZyUExemzqPnEeD5qtw5aHuuN8oSMCOe7pNSNaE7lTVHzuGYI")
setup_twitter_oauth("HJB9l39OhH7XKqr6deYHROft6",
" l4ZyUExemzqPnEeD5qtw5aHuuN8oSMCOe7pNSNaE7lTVHzuGYI")
rm(list=ls())
library(httr)
library(twitteR)
setup_twitter_oauth("HJB9l39OhH7XKqr6deYHROft6",
" l4ZyUExemzqPnEeD5qtw5aHuuN8oSMCOe7pNSNaE7lTVHzuGYI")
rdmTweets <- userTimeline("rdatamining", n=100)
rm(list=ls())
library(httr)
library(twitteR)
rdmTweets <- userTimeline("rdatamining", n=100)
library(ROAuth)
library(twitteR)
library(devtools)
install_github("twitteR", username="geoffjentry")
library(twitteR)
api_key <- "HJB9l39OhH7XKqr6deYHROft6"
api_secret <- " l4ZyUExemzqPnEeD5qtw5aHuuN8oSMCOe7pNSNaE7lTVHzuGYI"
access_token <- "2534082073-qlC6nlEgvmHb1zzJCqDhZhtIqIAYgZZBDJcOVra"
access_token_secret <- "GSdNj3Clasqm4Ub5Nl647y8cuafphvPi5NpcHkdasFk0p"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
?setup_twitter_oauth
setup_twitter_oauth
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
api_key <- "HJB9l39OhH7XKqr6deYHROft6"
api_secret <- "l4ZyUExemzqPnEeD5qtw5aHuuN8oSMCOe7pNSNaE7lTVHzuGYI"
access_token <- "2534082073-qlC6nlEgvmHb1zzJCqDhZhtIqIAYgZZBDJcOVra"
access_token_secret <- "GSdNj3Clasqm4Ub5Nl647y8cuafphvPi5NpcHkdasFk0p"
# consumer k: HJB9l39OhH7XKqr6deYHROft6
# Cons. secret: l4ZyUExemzqPnEeD5qtw5aHuuN8oSMCOe7pNSNaE7lTVHzuGYI
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
searchTwitter("iphone")
?searchTwitter
head(strip_retweets(tweets,strip_manual=TRUE,strip_mt=TRUE
)
)
head(strip_retweets(tweets,strip_manual=TRUE,strip_mt=TRUE))
tweets<-searchTwitter("#rstats",n=50)
head(strip_retweets(tweets,strip_manual=TRUE,strip_mt=TRUE))
crantastic<-getUser("crantastic",)
crantastic<-getUser("crantastic")
crntastic$getDescriptio
crantastic$getDescriptio
crantastic$getDescription()
crantastic$getFollowersCount()
crantastic$getFriends()
crantastic$getFavorites()
df<-twListToDF(tweets)
View(df)
shiny::runApp('C:/Projects/ShinyApps/DataAnalysis')
sql_lite_file=tempfile()
register_sqlite_backend(sql_lite_file)
install.packages("sqliter")
library(sqliter)
sql_lite_file=tempfile()
register_sqlite_backend(sql_lite_file)
install.packages("RSQLite")
library(RSQLite)
sql_lite_file=tempfile()
register_sqlite_backend(sql_lite_file)
register_db_backend(dbi_connection)
cran_tweets<-userTimeline('cranatic')
library(twitteR)
cran_tweets<-userTimeline('cranatic')
rm(list=ls())
library(devtools)
library(twitteR)
api_key <- "HJB9l39OhH7XKqr6deYHROft6"
api_secret <- "l4ZyUExemzqPnEeD5qtw5aHuuN8oSMCOe7pNSNaE7lTVHzuGYI"
access_token <- "2534082073-qlC6nlEgvmHb1zzJCqDhZhtIqIAYgZZBDJcOVra"
access_token_secret <- "GSdNj3Clasqm4Ub5Nl647y8cuafphvPi5NpcHkdasFk0p"
# consumer k: HJB9l39OhH7XKqr6deYHROft6
# Cons. secret: l4ZyUExemzqPnEeD5qtw5aHuuN8oSMCOe7pNSNaE7lTVHzuGYI
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
searchTwitter("iphone")
tweets<-searchTwitter("#rstats",n=50)
head(strip_retweets(tweets,strip_manual=TRUE,strip_mt=TRUE))
crantastic<-getUser("crantastic")
crantastic$getDescription()
crantastic$getFollowersCount()
crantastic$getFriends()
crantastic$getFavorites()
df<-twListToDF(tweets)
# Twitter timeline is simply a stream of tweets. We support two timelines,
# the user timeline and the home timeline. The former provides the most recent
# tweets of a specified user while the latter is used to display your own most recent
# tweets. These both return a list of status objects
cran_tweets<-userTimeline('cranatic')
r_tweets<-searchTwitter("#rstats",n=300)
r_tweets<-searchTwitter("#rstats",1=300)
r_tweets<-searchTwitter("#rstats",n=100)
sources<-sapply(r_tweets,function(x)x$getStatusSource())
sources<-gsub("</a>","",sources)
sources<-strsplit(sources,">")
sources<-sapply(sources,function(x)ifelse(length(x)>1,x[2],x[1]))
source_table=table(sources)
pie(source_table[source_table>10]
)
rm(list=ls())
library(devtools)
library(twitteR)
api_key <- "HJB9l39OhH7XKqr6deYHROft6"
api_secret <- "l4ZyUExemzqPnEeD5qtw5aHuuN8oSMCOe7pNSNaE7lTVHzuGYI"
access_token <- "2534082073-qlC6nlEgvmHb1zzJCqDhZhtIqIAYgZZBDJcOVra"
access_token_secret <- "GSdNj3Clasqm4Ub5Nl647y8cuafphvPi5NpcHkdasFk0p"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
delta.tweets<- searchTwitter("@delta",n=1500)
df<-twListToDF(delta.tweets)
View(df)
delta.text<-df$text; rm(df)
head(delta.text)
setwd("C:/Projects/ShinyApps/DataAnalysis")
hu.liu.pos<-scan("positive-words.txt", what="character", comment.char=";")
hu.liu.neg<-scan("negative-words.txt", what="character", comment.char=";")
hu.liu.neg
delta.tweets<- searchTwitter("@delta",n=1500)
df<-twListToDF(delta.tweets)
delta.text<-df$text; rm(df)
delta.tweets<- searchTwitter("@delta",n=100)
df<-twListToDF(delta.tweets)
delta.text<-df$text;
View(df)
shiny::runApp()
?searchTwitter
searchTwitter('charlie sheen', since='2011-03-01', until='2011-03-02')
?todat
?today
Sys.Date()
searchTwitter('charlie sheen', n=1,since='2011-03-01', until=as.character(Sys.Date()))
a<-twListToDF(searchTwitter('charlie sheen', n=1,since='2011-03-01', until=as.character(Sys.Date())))
View(a)
a<-twListToDF(searchTwitter('@NQ', n=1,since='2011-03-01', until=as.character(Sys.Date())))
a
View(a)
a<-twListToDF(searchTwitter('@NQ', n=1,since='2011-03-01', until=as.character(Sys.Date()),lang="english"))
a<-twListToDF(searchTwitter('@NQ', n=1,since='2011-03-01', until=as.character(Sys.Date()),lang="en"))
a<-twListToDF(searchTwitter('NQ', n=1,since='2011-03-01', until=as.character(Sys.Date()),lang="en"))
View(a)
a<-twListToDF(searchTwitter('NQ', n=10,since='2011-03-01', until=as.character(Sys.Date()),lang="en"))
a
View(a)
as.character(Sys.Date())
as.character(Sys.Date()-1)
?inf
until_day<-as.character(Sys.Date())
a<-twListToDF(searchTwitter('NQ', n=Inf,since='2011-03-01', until=until_day,lang="en"))
a<-twListToDF(searchTwitter('NQ', n=100000,since='2011-03-01', until=until_day,lang="en"))
until_day<-as.character(Sys.Date()-1)
a<-twListToDF(searchTwitter('NQ', n=100000,since='2011-03-01', until=until_day,lang="en"))
nrow(a)
max(as.Date(a[,5]))
min(as.Date(a[,5]))
plot(a[,5])
hist(a[,5])
hist(a[,5],breaks=20)
shiny::runApp()
shiny::runApp()
shiny::runApp()
